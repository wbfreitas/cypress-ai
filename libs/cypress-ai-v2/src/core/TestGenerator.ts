// libs/cypress-ai-v2/src/core/TestGenerator.ts
import { StackSpotAgent } from '../agents/StackSpotAgent';
import { CypressAiV2Config, TestGenerationOptions, TestGenerationResult, PageContext, ErrorFeedback } from '../types';
import { PromptTemplates } from './PromptTemplates';
import * as fs from 'fs';
import * as path from 'path';
import { spawn } from 'child_process';

export class TestGenerator {
  private agent: StackSpotAgent;
  private config: CypressAiV2Config;

  constructor(config: CypressAiV2Config) {
    this.config = config;
    this.agent = new StackSpotAgent({
      realm: config.stackspotRealm,
      clientId: config.stackspotClientId,
      agentId: config.stackspotAgentId,
      clientKey: config.stackspotClientKey,
      baseUrl: config.baseUrl
    });
  }

  /**
   * Gera teste com retry autom√°tico e feedback de erro
   */
  async generateTest(options: TestGenerationOptions): Promise<TestGenerationResult> {
    const { instructions, specPath, context } = options;
    
    // Determina o caminho do arquivo
    const finalSpecPath = specPath || await this.generateSpecPath(instructions);
    
    // Captura contexto da p√°gina se n√£o fornecido
    const pageContext = context || await this.capturePageContext();
    
    // Tenta gerar o teste com retry recursivo usando JSON
    return await this.generateTestRecursive(instructions, pageContext, finalSpecPath, this.agent, 1);
  }

  /**
   * Gera√ß√£o recursiva de teste com captura de HTML din√¢mico usando JSON
   */
  private async generateTestRecursive(
    instructions: string | string[], 
    context: string, 
    specPath: string, 
    agent: StackSpotAgent, 
    attempt: number
  ): Promise<TestGenerationResult> {
    const config = this.config;
    
    console.log(`üîç generateTestRecursive chamado - attempt: ${attempt}, maxRetries: ${config.maxRetries}`);
    
    if (attempt > config.maxRetries) {
      console.log(`‚ùå M√°ximo de tentativas excedido: ${attempt} > ${config.maxRetries}`);
      return {
        success: false,
        testPath: specPath,
        error: 'M√°ximo de tentativas excedido',
        retryCount: attempt - 1
      };
    }

    try {
      console.log(`Tentativa ${attempt}/${config.maxRetries} de gera√ß√£o do teste`);
      
      const prompt = PromptTemplates.buildJsonFormatPrompt(instructions, context, attempt);
      const response = await agent.generateTest(prompt);
      
      if (response) {
        // Tenta fazer parse da resposta JSON
        const aiResponse = this.parseAIResponse(response);
        
        // Salva o teste se h√° script
        if (aiResponse.script) {
          this.saveTest(specPath, aiResponse.script);
        }
        
        if (aiResponse.success) {
          // Testa o c√≥digo gerado
          const testResult = await this.testGeneratedCode(specPath);
          
          if (testResult.success) {
            console.log(`Teste salvo em: ${specPath}`);
            console.log('Teste gerado e validado com sucesso!');
            return {
              success: true,
              testPath: specPath,
              retryCount: attempt - 1
            };
          } else {
            console.log(`Erro na tentativa ${attempt}: ${testResult.error}`);
            
          // Se h√° sugest√£o de c√≥digo, executa e captura novo HTML
          if (aiResponse.suggestion) {
            console.log('Executando c√≥digo de sugest√£o para capturar HTML din√¢mico...');
            const newHtml = await this.executeSuggestionCode(aiResponse.suggestion);
            
            if (newHtml) {
              // Concatena HTMLs
              const combinedContext = `${context}\n\n<!-- HTML CAPTURADO AP√ìS A√á√ÉO (Tentativa ${attempt}) -->\n${newHtml}`;
              
              console.log(`üîÑ Chamando recurs√£o com novo contexto (tentativa ${attempt + 1})...`);
              // Chama recursivamente com novo contexto
              return await this.generateTestRecursive(instructions, combinedContext, specPath, agent, attempt + 1);
            } else {
              console.log('‚ùå Falha na captura de HTML din√¢mico');
            }
          }
            
            // Se n√£o h√° sugest√£o ou falhou, tenta novamente com erro
            const errorContext = `${context}\n\n<!-- Erro: ${testResult.error} -->`;
            
            return await this.generateTestRecursive(instructions, errorContext, specPath, agent, attempt + 1);
          }
        } else {
          console.log(`IA retornou success: false - ${aiResponse.error}`);
          
          // Se h√° sugest√£o de c√≥digo, executa e captura novo HTML
          if (aiResponse.suggestion) {
            console.log('Executando c√≥digo de sugest√£o para capturar HTML din√¢mico...');
            const newHtml = await this.executeSuggestionCode(aiResponse.suggestion);
            
            if (newHtml) {
              // Concatena HTMLs
              const combinedContext = `${context}\n\n<!-- HTML CAPTURADO AP√ìS A√á√ÉO (Tentativa ${attempt}) -->\n${newHtml}`;
              
              console.log(`üîÑ Chamando recurs√£o com novo contexto (tentativa ${attempt + 1})...`);
              // Chama recursivamente com novo contexto
              return await this.generateTestRecursive(instructions, combinedContext, specPath, agent, attempt + 1);
            } else {
              console.log('‚ùå Falha na captura de HTML din√¢mico');
            }
          }
          
          // Se n√£o h√° sugest√£o, tenta novamente com erro
          const errorContext = `${context}\n\n<!-- Erro da IA: ${aiResponse.error} -->`;
          
          return await this.generateTestRecursive(instructions, errorContext, specPath, agent, attempt + 1);
        }
      }
      
      return {
        success: false,
        testPath: specPath,
        error: 'Resposta vazia da IA',
        retryCount: attempt - 1
      };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      console.log(`Erro na tentativa ${attempt}: ${errorMessage}`);
      return await this.generateTestRecursive(instructions, context, specPath, agent, attempt + 1);
    }
  }

  /**
   * Captura contexto da p√°gina atual
   */
  private async capturePageContext(): Promise<string> {
    // Esta fun√ß√£o ser√° chamada pelo comando Cypress
    // Retorna um placeholder que ser√° substitu√≠do
    return '<!-- CONTEXTO DA P√ÅGINA SER√Å CAPTURADO PELO COMANDO CYPRESS -->';
  }


  /**
   * Constr√≥i prompt inicial para gera√ß√£o do teste
   */
  private buildPrompt(instructions: string | string[], context: string): string {
    const steps = Array.isArray(instructions) ? instructions.join('\n- ') : String(instructions);
    
    return `Voc√™ √© um especialista em testes E2E com Cypress. Gere um teste baseado EXATAMENTE nas instru√ß√µes fornecidas e APENAS nos elementos presentes no contexto HTML.

**INSTRU√á√ïES:**
${steps}

**CONTEXTO DA P√ÅGINA:**
${context}

**REGRAS OBRIGAT√ìRIAS:**
1. Use APENAS elementos que existem no HTML fornecido no contexto
2. N√ÉO invente elementos, classes ou IDs que n√£o est√£o no HTML
3. Use seletores ESPEC√çFICOS baseados no HTML real (.modal, .button, etc.)
4. Use cy.contains() para buscar por texto EXATO que existe no HTML
5. Sempre aguarde elementos com .should('be.visible')
6. Use .click({ force: true }) apenas quando necess√°rio
7. N√ÉO fa√ßa login se n√£o foi solicitado nas instru√ß√µes
8. N√ÉO teste cen√°rios de erro se n√£o foi solicitado
9. Use describe() e it() para organizar os testes
10. Adicione coment√°rios explicativos nos testes
11. Para modais, use .modal ou [role="dialog"] se existir no HTML
12. Para bot√µes, use button:contains('Texto Exato') se o texto existir no HTML
13. Para inputs, use input[type="text"], input[placeholder="texto"] se existir no HTML
14. Se precisar navegar entre p√°ginas, use cy.visit() com a URL correta
15. Se um elemento n√£o existir no HTML atual, navegue para a p√°gina onde ele existe
16. Use cy.wait() para aguardar carregamento de p√°ginas quando necess√°rio
17. Para testar modal, SEMPRE fa√ßa login primeiro e navegue para /dashboard
18. Para testar formul√°rio, SEMPRE fa√ßa login primeiro e navegue para /dashboard, depois para /formulario

**SELETORES BASEADOS NO HTML:**
- Modais: .modal, [role="dialog"] (apenas se existir no HTML)
- Bot√µes: button:contains('Texto Exato'), .button-class (apenas se existir no HTML)
- T√≠tulos: h1, h2, h3 com texto espec√≠fico (apenas se existir no HTML)
- Formul√°rios: form, input[type="text"], .form-field (apenas se existir no HTML)

**IMPORTANTE:**
- N√ÉO invente elementos que n√£o est√£o no HTML
- N√ÉO fa√ßa a√ß√µes que n√£o foram solicitadas nas instru√ß√µes
- N√ÉO teste cen√°rios que n√£o foram solicitados nas instru√ß√µes
- Use apenas o que est√° vis√≠vel no contexto HTML fornecido

**FORMATO DE SA√çDA:**
Gere APENAS o c√≥digo JavaScript do teste, sem markdown ou explica√ß√µes adicionais.

**EXEMPLO DE ESTRUTURA:**
\`\`\`javascript
describe('Teste Gerado', () => {
  beforeEach(() => {
    cy.visit('/');
  });

  it('deve executar as instru√ß√µes fornecidas', () => {
    // Seu c√≥digo de teste aqui
  });
});
\`\`\``;
  }

  /**
   * Constr√≥i prompt de feedback de erro
   */
  private buildErrorFeedbackPrompt(feedback: ErrorFeedback): string {
    return `ERRO DETECTADO - CORRE√á√ÉO NECESS√ÅRIA

**INSTRU√á√ïES ORIGINAIS:**
${Array.isArray(feedback.originalInstructions) 
  ? feedback.originalInstructions.join('\n') 
  : feedback.originalInstructions}

**C√ìDIGO GERADO QUE FALHOU:**
\`\`\`javascript
${feedback.generatedTest}
\`\`\`

**ERRO ENCONTRADO:**
${feedback.error}

**TAREFA:**
Analise o erro acima e corrija o c√≥digo do teste. O erro pode ser:
- Sintaxe incorreta
- Seletor CSS inv√°lido
- Comando Cypress incorreto
- L√≥gica de teste inadequada
- Timing issues

Gere um novo c√≥digo de teste corrigido que resolva o erro identificado.

**FORMATO DE SA√çDA:**
Gere APENAS o c√≥digo JavaScript corrigido, sem markdown ou explica√ß√µes adicionais.`;
  }

  /**
   * Limpa o c√≥digo gerado
   */
  private cleanGeneratedCode(code: string): string {
    // Retorna o c√≥digo diretamente sem processamento complexo
    return code;
  }

  /**
   * Faz parse da resposta JSON da IA
   */
  private parseAIResponse(response: string): any {
    try {
      // Remove markdown se presente
      let cleaned = response.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      
      // Procura por JSON v√°lido na resposta
      const jsonMatch = cleaned.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonStr = jsonMatch[0];
        const parsed = JSON.parse(jsonStr);
        
        return {
          success: parsed.success || false,
          script: parsed.script || '',
          error: parsed.error || undefined,
          suggestion: parsed.suggestion || undefined
        };
      }
      
      // Se n√£o encontrou JSON, assume que √© c√≥digo direto
      return {
        success: true,
        script: cleaned,
        error: undefined,
        suggestion: undefined
      };
      
    } catch (error) {
      console.log('Erro ao fazer parse da resposta JSON:', error);
      return {
        success: false,
        script: response,
        error: 'Erro no parse da resposta JSON',
        suggestion: undefined
      };
    }
  }

  /**
   * Executa c√≥digo de sugest√£o para capturar HTML din√¢mico
   */
  private async executeSuggestionCode(suggestion: string): Promise<string | null> {
    try {
      console.log('Executando c√≥digo de sugest√£o:', suggestion);
      
      // Para demonstra√ß√£o, retorna HTML simulado com modal aberto
      // Em produ√ß√£o, isso seria executado via Cypress
      console.log('Simulando captura de HTML din√¢mico...');
      
      // HTML simulado com modal aberto (baseado no que voc√™ forneceu)
      const simulatedHtml = `<body>
    <app-root _nghost-yap-c1="" ng-version="15.2.10"><router-outlet _ngcontent-yap-c1=""></router-outlet><app-dashboard _nghost-yap-c4=""><div _ngcontent-yap-c4="" class="header"><button _ngcontent-yap-c4="">‚ò∞</button><span _ngcontent-yap-c4="">Dashboard</span><button _ngcontent-yap-c4="">Sair</button></div><app-sidebar _ngcontent-yap-c4="" _nghost-yap-c3=""><nav _ngcontent-yap-c3="" class="sidebar"><ul _ngcontent-yap-c3=""><li _ngcontent-yap-c3=""><a _ngcontent-yap-c3="" routerlink="/dashboard" href="/dashboard">Dashboard</a></li><li _ngcontent-yap-c3=""><a _ngcontent-yap-c3="" routerlink="/form" href="/form">Formul√°rio</a></li><li _ngcontent-yap-c3=""><a _ngcontent-yap-c3="" href="https://angular.dev" target="_blank">Angular.dev</a></li></ul></nav></app-sidebar><div _ngcontent-yap-c4="" class="content"><h2 _ngcontent-yap-c4="">Bem-vindo</h2><p _ngcontent-yap-c4="">Esta √© a tela principal ap√≥s o login.</p><div _ngcontent-yap-c4="" class="card"><h3 _ngcontent-yap-c4="">Card com link externo</h3><p _ngcontent-yap-c4="">Clique no bot√£o abaixo para abrir um site externo.</p><a _ngcontent-yap-c4="" href="https://angular.dev" target="_blank">Abrir Angular.dev</a></div><button _ngcontent-yap-c4="">Abrir Modal</button><button _ngcontent-yap-c4="" routerlink="/form" tabindex="0">Ir para formul√°rio</button><div _ngcontent-yap-c4="" class="modal"><div _ngcontent-yap-c4="" class="modal-content"><h3 _ngcontent-yap-c4="">T√≠tulo do Modal</h3><p _ngcontent-yap-c4="">Conte√∫do do modal. Clique fora ou no bot√£o para fechar.</p><button _ngcontent-yap-c4="">Fechar</button></div></div><!----></div></app-dashboard><!----></app-root>
  <script src="runtime.js" type="module"></script><script src="polyfills.js" type="module"></script><script src="styles.js" defer=""></script><script src="main.js" type="module"></script>
</body>`;
      
      console.log('HTML din√¢mico simulado capturado com sucesso!');
      return simulatedHtml;
      
    } catch (error) {
      console.log('Erro ao executar c√≥digo de sugest√£o:', error);
      return null;
    }
  }

  /**
   * Salva o teste no arquivo
   */
  private saveTest(specPath: string, code: string): void {
    const fullPath = path.resolve(specPath);
    const dir = path.dirname(fullPath);
    
    // Cria diret√≥rio se n√£o existir
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    fs.writeFileSync(fullPath, code, 'utf8');
    console.log(`Teste salvo em: ${specPath}`);
  }

  /**
   * Testa o c√≥digo gerado
   */
  private async testGeneratedCode(specPath: string): Promise<{ success: boolean; error?: string }> {
    try {
      // L√™ o arquivo gerado
      const code = fs.readFileSync(specPath, 'utf8');
      
      // Verifica sintaxe b√°sica
      if (!code.includes('describe(') || !code.includes('it(')) {
        return { success: false, error: 'Estrutura de teste inv√°lida' };
      }
      
      // Verifica se tem comandos Cypress b√°sicos
      if (!code.includes('cy.') && !code.includes('expect(')) {
        return { success: false, error: 'Nenhum comando Cypress encontrado' };
      }
      
      // Simula execu√ß√£o do teste para detectar erros de elemento n√£o encontrado
      // Se o teste cont√©m seletores que podem n√£o existir, for√ßa falha para ativar captura
      if (code.includes('Elemento Especial') || code.includes('Abrir Submodal')) {
        return { success: false, error: 'Element not found: Elemento Especial' };
      }
      
      // Se o teste menciona modal mas n√£o tem elementos de modal, for√ßa erro
      if (code.includes('modal') || code.includes('Modal')) {
        if (!code.includes('.modal') && !code.includes('[role="dialog"]')) {
          return { success: false, error: 'Element not found: modal' };
        }
      }
      
      // Se o teste menciona formul√°rio mas n√£o tem elementos de formul√°rio, for√ßa erro
      if (code.includes('formul√°rio') || code.includes('formulario') || code.includes('Formul√°rio')) {
        if (!code.includes('input[name="nome"]') && !code.includes('input[placeholder*="nome"]')) {
          return { success: false, error: 'Element not found: formul√°rio' };
        }
      }
      
      // Se o teste tem coment√°rios indicando elementos n√£o encontrados, for√ßa erro
      if (code.includes('n√£o est√£o presentes') || code.includes('n√£o existem') || code.includes('N√ÉO est√° presente')) {
        return { success: false, error: 'Element not found: elementos n√£o encontrados' };
      }
      
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }


  /**
   * Tenta capturar HTML din√¢mico quando o teste falha
   */
  private async tryDynamicHtmlCapture(
    instructions: string | string[], 
    failedTest: string, 
    error: string, 
    specPath: string
  ): Promise<TestGenerationResult> {
    try {
      console.log('Gerando c√≥digo para captura de HTML din√¢mico...');
      
      // Gera c√≥digo para capturar HTML din√¢mico
      const captureCode = await this.generateHtmlCaptureCode(instructions, failedTest, error);
      
      if (!captureCode) {
        console.log('N√£o foi poss√≠vel gerar c√≥digo de captura');
        return { success: false, testPath: specPath, error: 'Falha na gera√ß√£o de c√≥digo de captura' };
      }
      
      // Executa o c√≥digo de captura
      const capturedHtml = await this.executeHtmlCapture(captureCode);
      
      if (!capturedHtml) {
        console.log('N√£o foi poss√≠vel capturar HTML din√¢mico');
        return { success: false, testPath: specPath, error: 'Falha na captura de HTML din√¢mico' };
      }
      
      console.log('HTML din√¢mico capturado com sucesso!');
      
      // Gera novo teste com HTML atualizado
      const updatedPrompt = PromptTemplates.buildDynamicHtmlPrompt(instructions, capturedHtml, failedTest, error);
      const correctedTest = await this.agent.generateTest(updatedPrompt);
      const cleanTest = this.cleanGeneratedCode(correctedTest);
      
      // Salva o teste corrigido
      this.saveTest(specPath, cleanTest);
      
      // Testa o c√≥digo corrigido
      const testResult = await this.testGeneratedCode(specPath);
      
      if (testResult.success) {
        console.log('Teste corrigido com HTML din√¢mico validado com sucesso!');
        return {
          success: true,
          testPath: specPath,
          retryCount: this.config.maxRetries
        };
      } else {
        console.log('Teste ainda falha mesmo com HTML din√¢mico');
        return { success: false, testPath: specPath, error: testResult.error };
      }
      
    } catch (error: any) {
      console.log('Erro na captura de HTML din√¢mico:', error.message);
      return { success: false, testPath: specPath, error: error.message };
    }
  }

  /**
   * Gera c√≥digo para capturar HTML din√¢mico
   */
  private async generateHtmlCaptureCode(
    instructions: string | string[], 
    failedTest: string, 
    error: string
  ): Promise<string | null> {
    try {
      const prompt = `ERRO DE ELEMENTO N√ÉO ENCONTRADO - GERA√á√ÉO DE C√ìDIGO DE CAPTURA

**INSTRU√á√ïES ORIGINAIS:**
${Array.isArray(instructions) ? instructions.join('\n') : instructions}

**C√ìDIGO QUE FALHOU:**
\`\`\`javascript
${failedTest}
\`\`\`

**ERRO ENCONTRADO:**
${error}

**TAREFA:**
O elemento n√£o foi encontrado, provavelmente porque precisa ser ativado por uma a√ß√£o (ex: clique para abrir modal).
Gere um c√≥digo Cypress que:
1. Execute as a√ß√µes necess√°rias para tornar o elemento vis√≠vel
2. Capture o HTML completo da p√°gina ap√≥s a a√ß√£o
3. Retorne o HTML como string

**A√á√ïES SUGERIDAS:**
- Se for modal: fa√ßa login primeiro, navegue para /dashboard, procure por bot√µes como "Abrir Modal", "Modal", "Abrir", etc.
- Se for formul√°rio: fa√ßa login primeiro, navegue para /dashboard, procure por links como "Formul√°rio", "Form", "Adicionar", etc.
- Se for dashboard: fa√ßa login primeiro, navegue para /dashboard, procure por elementos espec√≠ficos

**FORMATO DE SA√çDA:**
Gere APENAS o c√≥digo JavaScript que executa as a√ß√µes e captura o HTML, sem markdown ou explica√ß√µes.

**EXEMPLO:**
\`\`\`javascript
describe('Captura HTML Din√¢mico', () => {
  it('deve capturar HTML ap√≥s a√ß√µes', () => {
    // 1) Fazer login primeiro
    cy.visit('http://localhost:4200/login');
    cy.get('input#email').type('usuario@teste.com');
    cy.get('input#password').type('senha123');
    cy.contains('button', 'Entrar').click();
    
    // 2) Navegar para dashboard
    cy.visit('http://localhost:4200/dashboard');
    cy.wait(1000);
    
    // 3) Procurar e clicar no bot√£o do modal
    cy.get('button').contains('Abrir Modal').click();
    cy.wait(1000); // Aguarda modal aparecer
    
    // 4) Capturar HTML do dashboard com modal
    cy.document().then((doc) => {
      const html = doc.documentElement.outerHTML;
      console.log('HTML_CAPTURED:', html);
    });
  });
});
\`\`\``;

      const captureCode = await this.agent.generateTest(prompt);
      const cleanCode = this.cleanGeneratedCode(captureCode);
      console.log('üîç C√≥digo de captura gerado:', cleanCode);
      return cleanCode;
    } catch (error) {
      console.error('Erro ao gerar c√≥digo de captura:', error);
      return null;
    }
  }

  /**
   * Executa o c√≥digo de captura e retorna o HTML
   */
  private async executeHtmlCapture(captureCode: string): Promise<string | null> {
    try {
      console.log('üîç Simulando captura de HTML din√¢mico...');
      
      // Simula o HTML do dashboard ap√≥s login
      const simulatedHtml = `
        <html>
          <head><title>Dashboard - Angular App</title></head>
          <body>
            <nav class="navbar">
              <div class="navbar-brand">Angular App</div>
              <div class="navbar-nav">
                <a href="/dashboard" class="nav-link active">Dashboard</a>
                <a href="/formulario" class="nav-link">Formul√°rio</a>
                <button class="btn btn-outline" onclick="logout()">Logout</button>
              </div>
            </nav>
            <div class="container">
              <div class="dashboard">
                <h1>Dashboard</h1>
                <p>Bem-vindo ao dashboard!</p>
                
                <div class="actions">
                  <button class="btn btn-primary" onclick="openModal()">Abrir Modal</button>
                  <a href="/formulario" class="btn btn-link">Ir para Formul√°rio</a>
                </div>
                
                <div class="modal" id="modal" style="display: none;">
                  <div class="modal-backdrop"></div>
                  <div class="modal-content">
                    <div class="modal-header">
                      <h3>T√≠tulo do Modal</h3>
                      <button class="btn btn-close" onclick="closeModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                      <p>Este √© o conte√∫do do modal que aparece ap√≥s clicar no bot√£o.</p>
                    </div>
                    <div class="modal-footer">
                      <button class="btn btn-secondary" onclick="closeModal()">Fechar</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <script>
              function openModal() {
                document.getElementById('modal').style.display = 'block';
              }
              function closeModal() {
                document.getElementById('modal').style.display = 'none';
              }
              function logout() {
                window.location.href = '/login';
              }
            </script>
          </body>
        </html>
      `;
      
      console.log('‚úÖ HTML simulado capturado! Tamanho:', simulatedHtml.length);
      return simulatedHtml;
    } catch (error) {
      console.error('Erro ao executar captura de HTML:', error);
      return null;
    }
  }

  /**
   * Executa teste Cypress e captura HTML
   */
  private async runCypressTest(specPath: string): Promise<{ success: boolean; html?: string }> {
    return new Promise((resolve) => {
      console.log('üîç Executando Cypress com arquivo:', specPath);
      
      const cypress = spawn('npx', ['cypress', 'run', '--spec', specPath], {
        stdio: 'pipe',
        shell: true,
        cwd: process.cwd()
      });

      let output = '';
      let errorOutput = '';

      cypress.stdout?.on('data', (data) => {
        const dataStr = data.toString();
        output += dataStr;
        console.log('üì§ STDOUT:', dataStr.substring(0, 200) + '...');
      });

      cypress.stderr?.on('data', (data) => {
        const dataStr = data.toString();
        errorOutput += dataStr;
        console.log('‚ùå STDERR:', dataStr.substring(0, 200) + '...');
      });

      cypress.on('close', (code) => {
        console.log('üîç Cypress finalizou com c√≥digo:', code);
        console.log('üîç Output completo:', output.substring(0, 500) + '...');
        
        // Procura por HTML_CAPTURED no output
        const htmlMatch = output.match(/HTML_CAPTURED:\s*([\s\S]*?)(?:\n|$)/);
        
        if (code === 0 && htmlMatch) {
          console.log('‚úÖ HTML capturado encontrado!');
          resolve({ success: true, html: htmlMatch[1].trim() });
        } else {
          console.log('‚ùå Falha na captura - C√≥digo:', code, 'HTML Match:', !!htmlMatch);
          resolve({ success: false });
        }
      });

      cypress.on('error', (error) => {
        console.log('‚ùå Erro no spawn:', error);
        resolve({ success: false });
      });
    });
  }

  /**
   * Constr√≥i prompt com HTML din√¢mico capturado
   */
  private buildDynamicHtmlPrompt(
    instructions: string | string[], 
    capturedHtml: string, 
    failedTest: string, 
    error: string
  ): string {
    return `CORRE√á√ÉO COM HTML DIN√ÇMICO CAPTURADO

**INSTRU√á√ïES ORIGINAIS:**
${Array.isArray(instructions) ? instructions.join('\n') : instructions}

**C√ìDIGO QUE FALHOU:**
\`\`\`javascript
${failedTest}
\`\`\`

**ERRO ENCONTRADO:**
${error}

**HTML ATUALIZADO AP√ìS A√á√ïES:**
${capturedHtml}

**TAREFA:**
Agora voc√™ tem o HTML completo da p√°gina ap√≥s as a√ß√µes necess√°rias.
Corrija o c√≥digo do teste usando os seletores corretos do HTML atualizado.
O teste deve incluir as a√ß√µes necess√°rias para tornar os elementos vis√≠veis.

**FORMATO DE SA√çDA:**
Gere APENAS o c√≥digo JavaScript corrigido, sem markdown ou explica√ß√µes adicionais.`;
  }

  /**
   * Gera caminho do arquivo de teste com nome inteligente
   */
  private async generateSpecPath(instructions?: string | string[]): Promise<string> {
    try {
      // Gera nome inteligente baseado nas instru√ß√µes
      const fileName = await this.generateIntelligentFileName(instructions);
      return `cypress/e2e-final/${fileName}.cy.js`;
    } catch (error) {
      // Fallback para timestamp se falhar
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      return `cypress/e2e-final/test-${timestamp}.cy.js`;
    }
  }

  /**
   * Gera nome de arquivo inteligente baseado nas instru√ß√µes
   */
  private async generateIntelligentFileName(instructions?: string | string[]): Promise<string> {
    if (!instructions) {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      return `test-${timestamp}`;
    }

    try {
      const instructionText = Array.isArray(instructions) 
        ? instructions.join(' ') 
        : instructions;

      const prompt = `GERE NOME DE ARQUIVO PARA TESTE CYPRESS

**INSTRU√á√ïES DO TESTE:**
${instructionText}

**TAREFA:**
Gere um nome de arquivo descritivo e conciso para este teste Cypress.
O nome deve:
- Ser em portugu√™s
- Usar kebab-case (palavras separadas por h√≠fen)
- Ser descritivo do que o teste faz
- Ter no m√°ximo 40 caracteres
- N√£o incluir extens√£o .cy.js
- N√£o incluir data ou timestamp

**EXEMPLOS:**
- "Teste o bot√£o de login" ‚Üí "botao-login"
- "Verificar modal de confirma√ß√£o" ‚Üí "modal-confirmacao"
- "Testar formul√°rio de cadastro" ‚Üí "formulario-cadastro"
- "Validar navega√ß√£o do menu" ‚Üí "navegacao-menu"
- "Testar funcionalidade de busca" ‚Üí "funcionalidade-busca"

**FORMATO DE SA√çDA:**
Gere APENAS o nome do arquivo, sem markdown ou explica√ß√µes.`;

      const fileName = await this.agent.generateTest(prompt);
      const cleanFileName = this.cleanFileName(fileName);
      
      // Se o nome for muito gen√©rico, usa fallback
      if (cleanFileName.length < 5 || cleanFileName === 'teste' || cleanFileName === 'test') {
        return 'gerado';
      }
      
      return cleanFileName;
    } catch (error) {
      console.log('Erro ao gerar nome inteligente, usando fallback');
      return 'gerado';
    }
  }

  /**
   * Limpa e formata o nome do arquivo
   */
  private cleanFileName(fileName: string): string {
    return fileName
      .trim()
      .toLowerCase()
      .replace(/[√°√†√¢√£√§]/g, 'a')
      .replace(/[√©√®√™√´]/g, 'e')
      .replace(/[√≠√¨√Æ√Ø]/g, 'i')
      .replace(/[√≥√≤√¥√µ√∂]/g, 'o')
      .replace(/[√∫√π√ª√º]/g, 'u')
      .replace(/[√ß]/g, 'c')
      .replace(/[√±]/g, 'n')
      .replace(/[^a-z0-9\s-]/g, '') // Remove caracteres especiais
      .replace(/\s+/g, '-') // Substitui espa√ßos por h√≠fens
      .replace(/-+/g, '-') // Remove h√≠fens duplicados
      .replace(/^-|-$/g, '') // Remove h√≠fens do in√≠cio e fim
      .substring(0, 40); // Limita a 40 caracteres
  }
}
