// libs/cypress-ai-v2/src/cli/index.ts
import { Command } from 'commander';
import { SetupCommand } from './setup';
import { RunCommand } from './run';
import { OpenCommand } from './open';
import { GenerateCommand } from './generate';

const program = new Command();

program
  .name('cyai-v2')
  .description('Cypress AI v2.0 - Biblioteca simplificada para gera√ß√£o autom√°tica de testes')
  .version('2.0.0');

// Comando setup
program
  .command('setup')
  .description('Configura o Cypress AI v2.0')
  .option('-r, --realm <realm>', 'StackSpot Realm', 'stackspot-freemium')
  .option('-c, --client-id <clientId>', 'StackSpot Client ID')
  .option('-a, --agent-id <agentId>', 'StackSpot Agent ID')
  .option('-k, --client-key <clientKey>', 'StackSpot Client Key')
  .option('-b, --base-url <baseUrl>', 'Base URL da aplica√ß√£o', 'http://localhost:4200')
  .option('-m, --model <model>', 'Modelo de IA', 'qwen2.5-coder:latest')
  .action(async (options) => {
    const setupCommand = new SetupCommand();
    await setupCommand.run();
  });

// Comando run
program
  .command('run')
  .description('Executa os testes Cypress (padr√£o: pasta e2e-final)')
  .option('-s, --spec <spec>', 'Arquivo de teste espec√≠fico (padr√£o: cypress/e2e-final/**/*.cy.{js,ts})')
  .option('-b, --browser <browser>', 'Navegador para executar (chrome, firefox, edge, electron)')
  .option('--headed', 'Executa com interface gr√°fica (n√£o headless)')
  .option('-c, --config <config>', 'Arquivo de configura√ß√£o do Cypress')
  .option('-e, --env <env>', 'Vari√°veis de ambiente')
  .option('--reporter <reporter>', 'Reporter para os resultados')
  .option('--reporter-options <options>', 'Op√ß√µes do reporter')
  .action(async (options) => {
    const runCommand = new RunCommand();
    await runCommand.run({
      spec: options.spec,
      browser: options.browser,
      headless: !options.headed,
      config: options.config,
      env: options.env,
      reporter: options.reporter,
      reporterOptions: options.reporterOptions
    });
  });

// Comando open
program
  .command('open')
  .description('Abre o Cypress no modo interativo (padr√£o: pasta e2e-final)')
  .option('-s, --spec <spec>', 'Arquivo de teste espec√≠fico (padr√£o: cypress/e2e-final/**/*.cy.{js,ts})')
  .option('-b, --browser <browser>', 'Navegador para abrir (chrome, firefox, edge)')
  .option('-c, --config <config>', 'Arquivo de configura√ß√£o do Cypress')
  .option('-e, --env <env>', 'Vari√°veis de ambiente')
  .option('--global', 'Usa instala√ß√£o global do Cypress')
  .action(async (options) => {
    const openCommand = new OpenCommand();
    await openCommand.run({
      spec: options.spec,
      browser: options.browser,
      config: options.config,
      env: options.env,
      global: options.global
    });
  });

// Comando generate
program
  .command('generate')
  .description('Executa os testes de gera√ß√£o (pasta e2e-ai)')
  .option('-s, --spec <spec>', 'Arquivo de teste espec√≠fico (padr√£o: cypress/e2e-ai/**/*.cy.{js,ts})')
  .option('-b, --browser <browser>', 'Navegador para executar (chrome, firefox, edge, electron)')
  .option('--headed', 'Executa com interface gr√°fica (n√£o headless)')
  .option('-c, --config <config>', 'Arquivo de configura√ß√£o do Cypress')
  .option('-e, --env <env>', 'Vari√°veis de ambiente')
  .option('--reporter <reporter>', 'Reporter para os resultados')
  .option('--reporter-options <options>', 'Op√ß√µes do reporter')
  .action(async (options) => {
    const generateCommand = new GenerateCommand();
    await generateCommand.run({
      spec: options.spec,
      browser: options.browser,
      headless: !options.headed,
      config: options.config,
      env: options.env,
      reporter: options.reporter,
      reporterOptions: options.reporterOptions
    });
  });

// Comando help
program
  .command('help')
  .description('Mostra ajuda detalhada')
  .action(() => {
    console.log(`
ü§ñ Cypress AI v2.0 - Biblioteca Simplificada

üìã COMANDOS DISPON√çVEIS:

1. Setup (Configura√ß√£o inicial):
   cyai-v2 setup --client-id <id> --agent-id <id> --client-key <key>
   
   Op√ß√µes:
   --realm <realm>        StackSpot Realm (padr√£o: stackspot-freemium)
   --client-id <id>       StackSpot Client ID (obrigat√≥rio)
   --agent-id <id>        StackSpot Agent ID (obrigat√≥rio)
   --client-key <key>     StackSpot Client Key (obrigat√≥rio)
   --base-url <url>       Base URL da aplica√ß√£o (padr√£o: http://localhost:4200)
   --model <model>        Modelo de IA (padr√£o: qwen2.5-coder:latest)

2. Executar testes:
   cyai-v2 run                    # Executa todos os testes da pasta e2e-final
   cyai-v2 run --spec <arquivo>   # Executa teste espec√≠fico
   cyai-v2 run --browser chrome   # Executa no Chrome
   cyai-v2 run --headed           # Executa com interface gr√°fica

3. Executar testes de gera√ß√£o:
   cyai-v2 generate               # Executa todos os testes da pasta e2e-ai
   cyai-v2 generate --spec <arquivo> # Executa teste espec√≠fico
   cyai-v2 generate --browser chrome # Executa no Chrome
   cyai-v2 generate --headed      # Executa com interface gr√°fica

4. Abrir Cypress:
   cyai-v2 open                   # Abre Cypress interativo (pasta e2e-final)
   cyai-v2 open --spec <arquivo>  # Abre teste espec√≠fico
   cyai-v2 open --browser chrome  # Abre no Chrome

5. Uso nos testes:
   cy.ai('Teste o bot√£o de login')
   cy.ai(['Teste login', 'Teste logout'])
   cy.ai('Teste o modal', { specPath: 'cypress/e2e-final/modal.cy.js' })

üìÅ ESTRUTURA CRIADA:
   cypress/
   ‚îú‚îÄ‚îÄ e2e-ai/           # Testes gerados pela IA
   ‚îú‚îÄ‚îÄ e2e-final/        # Testes finais (atualizados automaticamente)
   ‚îî‚îÄ‚îÄ support/
       ‚îî‚îÄ‚îÄ e2e.ts        # Configura√ß√£o de suporte

üîß CONFIGURA√á√ÉO:
   .env                  # Vari√°veis de ambiente
   cypress.config.ts     # Configura√ß√£o do Cypress

üìñ EXEMPLO COMPLETO:
   1. cyai-v2 setup --client-id abc123 --agent-id def456 --client-key ghi789
   2. npm start
   3. cyai-v2 open
   4. cy.ai('Teste o formul√°rio de login')
   5. cyai-v2 generate --spec cypress/e2e-ai/teste-login.cy.js
   6. cyai-v2 run --spec cypress/e2e-final/teste-login.cy.js

‚ú® CARACTER√çSTICAS:
   - Comando √∫nico: cy.ai()
   - Captura contexto autom√°tico
   - Retry autom√°tico com feedback de erro
   - Atualiza√ß√£o autom√°tica de testes finais
   - Configura√ß√£o simplificada
   - Focado no StackSpot
    `);
  });

// Executa o CLI
program.parse();
